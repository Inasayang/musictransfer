Metadata-Version: 2.4
Name: musictransfer
Version: 1.0.0
Summary: Spotify and YouTube Music Playlist Migration Tool
Author-email: Inasayang <xiayangzzw@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/Inasayang/musictransfer
Project-URL: Repository, https://github.com/Inasayang/musictransfer
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.28.0
Requires-Dist: Flask>=3.1.1
Requires-Dist: python-dotenv>=1.1.1

# MusicTransfer

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Version](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/downloads/)

A powerful web-based tool for migrating music playlists between Spotify and YouTube Music. Transfer your favorite playlists seamlessly while maintaining track metadata and organization.

## Prerequisites

- Python
- Spotify Developer Account
- Google Cloud Project with YouTube Data API v3 enabled

## Installation

1. Clone the repository:
```bash
git clone https://github.com/Inasayang/musictransfer.git
cd musictransfer
```

2. Install dependencies using PDM:
```bash
pdm install
```

## Configuration

1. Create a `.env` file in the project root:
```env
# Spotify API Credentials
SPOTIFY_CLIENT_ID=your_spotify_client_id
SPOTIFY_CLIENT_SECRET=your_spotify_client_secret

# YouTube/Google API Credentials
YOUTUBE_CLIENT_ID=your_google_client_id
YOUTUBE_CLIENT_SECRET=your_google_client_secret
YOUTUBE_API_KEY=your_youtube_data_api_key

# Application Settings
REDIRECT_URI=http://localhost:5000/callback
```

2. **Spotify Setup**:
   - Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard)
   - Create a new app
   - Add `http://localhost:5000/callback` to Redirect URIs
   - Copy Client ID and Client Secret

3. **YouTube Music Setup**:
   - Go to [Google Cloud Console](https://console.cloud.google.com/)
   - Create a new project or select existing one
   - Enable YouTube Data API v3
   - Create OAuth 2.0 credentials
   - Add `http://localhost:5000/callback` to authorized redirect URIs
   - Also create an API key for YouTube Data API

## Usage

1. Start the application:
```bash
python run.py
```

2. Open your browser to `http://localhost:5000`

3. Authenticate with both Spotify and YouTube Music:
   - Click "Connect to Spotify" and authorize the application
   - Click "Connect to YouTube Music" and authorize the application

4. Select a Spotify playlist to migrate

5. Click "Start Migration" and monitor the progress

6. Your playlist will be created in YouTube Music with all transferable tracks

## Project Structure

```
musictransfer/
├── src/
│   ├── app.py                 # Main Flask application
│   ├── config.py              # Configuration management
│   ├── connectors/            # Platform-specific connectors
│   │   ├── spotify_connector.py
│   │   └── youtube_connector.py
│   ├── converters/            # Data conversion utilities
│   │   └── data_converter.py
│   ├── engine/                # Migration engine
│   │   └── migration_engine.py
│   ├── models/                # Data models
│   ├── static/                # Web assets (CSS, JS)
│   ├── templates/             # HTML templates
│   └── utils/                 # Utility functions
├── run.py                     # Application launcher
├── pyproject.toml            # Project configuration
└── README.md                 # This file
```

## API Endpoints

- `GET /` - Main application interface
- `GET /auth/spotify` - Spotify OAuth initialization
- `GET /auth/youtube` - YouTube OAuth initialization  
- `GET /callback` - OAuth callback handler
- `GET /api/playlists?platform=spotify|youtube` - Get user playlists
- `POST /api/migrate` - Start playlist migration
- `GET /api/migration/status` - Get migration progress
- `GET /api/auth/status` - Check authentication status

## Development

1. Install development dependencies:
```bash
pdm install -G dev
```

2. Run tests:
```bash
pytest
```

## Limitations

- Currently supports migration from Spotify to YouTube Music only
- Some tracks may not be available on the target platform
- Playlist artwork is not transferred
- Migration speed depends on API rate limits

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Support

If you encounter any issues or have questions:

1. Check the application logs (`musictransfer.log`)
2. Ensure all API credentials are correctly configured
3. Verify that both platforms are properly authenticated
4. Open an issue on GitHub with detailed error information

## Acknowledgments

- Spotify Web API for music data access
- YouTube Data API v3 for playlist management
- Flask web framework for the user interface

---

**Note**: This tool is for personal use only. Please respect the terms of service of both Spotify and YouTube Music when using this application.
